joins :
->a join is a way to combine data from two or more databse tables based  on related column between them . 
->joins are used we want to query information that is distributed across multiple table in a database, and the information we need is not contained in a single table. by joining tables together we can create a virtual table that contains all of the information we need for our query.

----------------------------------------------------
CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    state VARCHAR(50) NOT NULL,
    city VARCHAR(50) NOT NULL
);

INSERT INTO users (name, state, city) VALUES
('Amit Sharma', 'Rajasthan', 'Jaipur'),
('Sneha Verma', 'Maharashtra', 'Mumbai'),
('Rajesh Kumar', 'Karnataka', 'Bangalore'),
('Priya Yadav', 'Tamil Nadu', 'Chennai'),
('Vikas Gupta', 'Uttar Pradesh', 'Lucknow'),
('Neha Singh', 'West Bengal', 'Kolkata'),
('Rohan Mehta', 'Gujarat', 'Ahmedabad'),
('Sakshi Malhotra', 'Punjab', 'Chandigarh'),
('Ankit Joshi', 'Madhya Pradesh', 'Indore'),
('Divya Pandey', 'Bihar', 'Patna');

SELECT * FROM users;
-------------------------------------------------
second table : 
CREATE TABLE orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    order_date DATE NOT NULL
);

INSERT INTO orders (user_id, order_date) VALUES
(1, '2024-02-10'),
(2, '2024-02-11'),
(3, '2024-02-12'),
(4, '2024-02-13'),
(5, '2024-02-14'),
(6, '2024-02-15'),
(7, '2024-02-16'),
(8, '2024-02-17'),
(9, '2024-02-18'),
(10, '2024-02-19');

SELECT * FROM orders;
------------------------------------------------------
there four type of joins :
a)left join
b)right join 
c)inner join 
d)outer join 
===============================
cross join 
self join 
-----------------------------------------------------------
cross joins : 
-in SQL, a cross join is a type of join that returns the cartesian product of the two tables being joined. in other words ,it returns all possible combinations of rows from the two tables. 

cross join are not commonly used in practice  ,but they can be useful in certain scenarios ,such as generating test data or exploring all possible combination of items in a product catalogue however it is important to be cautions when using cross joins with large tables, as they can generate a very large result , which can be resource intensive and slow to processs . 
---------------------------------------------------
inner joins : 
-in sql, an inner join is type of join operation that combines data from two or more tables based on specified condition the inner joins return only the rows from both tables that satisfy the specified condition that is the matching rows .

when you perform an inner join on two tables ,  the result set will only contain rows where there is a match between the joining columns in both tables if there is no match then the row will not be included in the result set.
------------------------------------------------------------------
create table :
CREATE TABLE emp (
    emp_id INT PRIMARY KEY,
    name VARCHAR(100),
    department_id INT,
    salary DECIMAL(10,2)
);
-------------------------------------------------------------------
USE meera;
INSERT INTO emp (emp_id, name, department_id, salary) VALUES
(1, 'Alice', 101, 50000.00),
(2, 'Bob', 102, 60000.00),
(3, 'Charlie', 101, 55000.00),
(4, 'David', 103, 62000.00),
(5, 'Eve', 102, 58000.00);
------------------------------------------------------------------
CREATE TABLE department (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100) NOT NULL
);
----------------------------------------------------------------
INSERT INTO department (department_id, department_name) VALUES
(101, 'HR'),
(102, 'IT'),
(103, 'Finance'),
(104, 'Marketing'),
(105, 'Operations');
-----------------------------------------------------------------
right join :
->a right join, also known as right outer join ,is a type of join operation in SQL that returns all the rows from the right table and matching rows from the left table .if there are no matches, in the left table, the result will still contain all the rows form the right table ,with NULL values from the column from the left table. 

SELECT * FROM meera.department t1 RIGHT JOIN meera.emp t2 ON t1.department_id =t2.department_id;
	
----------------------------------------------------------
a full outer join ,sometimes called a full join, is a type of join operation in SQL that returns all matching rows from both the left and right tables , as well as any non-matching rows from either table, in other words ,a full outer join returns all the rows from both tables and matches rows with column values in specified columns ,and fills in NULL values for column where there is not match 
----------------------------------------------------------------
left join :
SELECT * FROM meera.department t1 LEFT JOIN meera.emp t2 ON t1.department_id =t2.department_id;
------------------------------------------------------------------------
1)UNION :
-the UNION operator is used to combine the results of two or more SELECT statements into a single result set. the UNION operator removes duplicate rows between the various SELECT statements.

2)UNION ALL :
-the UNION ALL operator is similar to the UNION operator, but it does not remove duplicate rows from the result set.

3)INTERSECT :
-the INTERSECT operator returns only the rows that appear in both results set of two SELECT.

4)EXCEPT :
-the EXCEPT or MINUS operator returns only the distinct rows that appear in the first result set but not in the second result set of two SELECT statements. 

-------------------------------------------------------------------------
CREATE TABLE person1 (
    id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);


INSERT INTO person1 (id, name) VALUES 
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie'),
(4, 'David'),
(5, 'Emma');
-----------------------------------------------------------------
USE meera;
CREATE TABLE person2 (
    id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

----------------------------------------
USE meera;
SELECT * FROM person1 
UNION 
SELECT * FROM person2;
-------------------------------------------------------------
USE meera;
SELECT * FROM person1 
UNION ALL
SELECT * FROM person2;
-----------------------------------------------------------------

